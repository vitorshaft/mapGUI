#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Feb 04, 2021 01:01:26 AM -03  platform: Windows NT

import sys
from firebase import firebase
from time import sleep

firebase = firebase.FirebaseApplication("https://robogps-3fe5e.firebaseio.com/", None)

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import mapa_PAGE_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = mapeador8266 (root)
    mapa_PAGE_support.init(root, top)
    root.mainloop()

w = None
def create_mapeador8266(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_mapeador8266(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = mapeador8266 (w)
    mapa_PAGE_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_mapeador8266():
    global w
    w.destroy()
    w = None

class mapeador8266:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("600x560+338+97")
        top.minsize(120, 1)
        top.maxsize(1370, 729)
        top.resizable(1,  1)
        top.title("MAPA DE OBSTACULOS")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.sub_menu = tk.Menu(top,
                activebackground="#ececec",
                activeborderwidth=1,
                activeforeground="#000000",
                background="#d9d9d9",
                borderwidth=1,
                disabledforeground="#a3a3a3",
                foreground="#000000",
                tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                label="NewCascade")

        self.Canvas1 = tk.Canvas(top)
        self.Canvas1.place(relx=0.075, rely=0.0, relheight=0.863, relwidth=0.833)

        self.Canvas1.configure(background="#4b4b4b")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(highlightbackground="#d9d9d9")
        self.Canvas1.configure(highlightcolor="black")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="blue")
        self.Canvas1.configure(selectforeground="white")

        self.Resetar = tk.Button(top)
        self.Resetar.place(relx=0.267, rely=0.893, height=24, width=77)
        self.Resetar.configure(activebackground="#ececec")
        self.Resetar.configure(activeforeground="#000000")
        self.Resetar.configure(background="#ffffff")
        self.Resetar.configure(disabledforeground="#a3a3a3")
        self.Resetar.configure(foreground="#000000")
        self.Resetar.configure(highlightbackground="#d9d9d9")
        self.Resetar.configure(highlightcolor="black")
        self.Resetar.configure(pady="0")
        self.Resetar.configure(text='''Resetar''', command=self.reiniciar)

        self.Origem = tk.Label(top)
        self.Origem.place(relx=0.017, rely=0.0, height=20, width=34)
        self.Origem.configure(activebackground="#f9f9f9")
        self.Origem.configure(activeforeground="black")
        self.Origem.configure(background="#d9d9d9")
        self.Origem.configure(disabledforeground="#a3a3a3")
        self.Origem.configure(foreground="#000000")
        self.Origem.configure(highlightbackground="#d9d9d9")
        self.Origem.configure(highlightcolor="black")
        self.Origem.configure(text='''(0,0)''')

        self.Limite = tk.Label(top)
        self.Limite.place(relx=0.867, rely=0.863, height=20, width=64)
        self.Limite.configure(activebackground="#f9f9f9")
        self.Limite.configure(activeforeground="black")
        self.Limite.configure(background="#d9d9d9")
        self.Limite.configure(disabledforeground="#a3a3a3")
        self.Limite.configure(foreground="#000000")
        self.Limite.configure(highlightbackground="#d9d9d9")
        self.Limite.configure(highlightcolor="black")
        self.Limite.configure(text='''(500,500)''')

        self.iniciar = tk.Button(top)
        self.iniciar.place(relx=0.083, rely=0.893, height=24, width=97)
        self.iniciar.configure(activebackground="#ececec")
        self.iniciar.configure(activeforeground="#000000")
        self.iniciar.configure(background="#ffffff")
        self.iniciar.configure(disabledforeground="#a3a3a3")
        self.iniciar.configure(foreground="#000000")
        self.iniciar.configure(highlightbackground="#d9d9d9")
        self.iniciar.configure(highlightcolor="black")
        self.iniciar.configure(pady="0")
        self.iniciar.configure(text='''Iniciar''',command=self.comecar)

        self.pausar = tk.Button(top)
        self.pausar.place(relx=0.617, rely=0.893, height=24, width=97)
        self.pausar.configure(activebackground="#ececec")
        self.pausar.configure(activeforeground="#000000")
        self.pausar.configure(background="#ffffff")
        self.pausar.configure(disabledforeground="#a3a3a3")
        self.pausar.configure(foreground="#000000")
        self.pausar.configure(highlightbackground="#d9d9d9")
        self.pausar.configure(highlightcolor="black")
        self.pausar.configure(pady="0")
        self.pausar.configure(text='''pausar''', command=self.pausar)

        self.limparMapa = tk.Button(top)
        self.limparMapa.place(relx=0.417, rely=0.893, height=24, width=97)
        self.limparMapa.configure(activebackground="#ececec")
        self.limparMapa.configure(activeforeground="#000000")
        self.limparMapa.configure(background="#ffffff")
        self.limparMapa.configure(disabledforeground="#a3a3a3")
        self.limparMapa.configure(foreground="#000000")
        self.limparMapa.configure(highlightbackground="#d9d9d9")
        self.limparMapa.configure(highlightcolor="black")
        self.limparMapa.configure(pady="0")
        self.limparMapa.configure(text='''Limpar Mapa''', command=self.apagar)

        self.var = 0.0
        self.escala = tk.Scale(from_=1, to=10)
        self.escala.place(relx=0.92,rely=0.3,height=150)

        self.ciclo = True
        #self.escala.pack()
    
    def comecar(self):
        '''for i in range(10):
            self.result = firebase.get('/', '')
            self.xis = self.result['XIS']
            self.ips = self.result['IPS']
            #cria oval no canvas com coordenadas (x0,y0,x1,y1)
            self.Canvas1.create_oval(self.xis,self.ips,self.xis+4,self.ips+4,outline="blue",width=1,fill="blue")
            sleep(2)
            '''
        #while(self.ciclo == True):
        self.result = firebase.get('/', '')
        for item in range(9):
            '''
            self.xis = (250+self.result['XIS'])/self.escala.get()
            self.ips = (250+self.result['IPS'])/self.escala.get()
            self.xObs = (250+self.result['X obs'])/self.escala.get()
            self.yObs = (250+self.result['Y obs'])/self.escala.get()
            '''
            self.xis = (250+self.result[0])/self.escala.get()
            self.ips = (250+self.result[1])/self.escala.get()
            self.xObs = (250+self.result[item+10])/self.escala.get()
            self.yObs = (250+self.result[item+20])/self.escala.get()
            print(self.xObs)
            print(self.yObs)
            self.Canvas1.create_oval(self.xis,self.ips,self.xis+6,self.ips+6,outline="#8ccef3",width=1,fill="#8ccef3")
            self.Canvas1.create_oval(self.xObs,self.yObs,self.xObs+4,self.yObs+4,outline="#f3b18c",width=1,fill="#f3b18c")
            #sleep(5)
            #self.ciclo = False

    def apagar(self):
        self.Canvas1.delete("all")

    def reiniciar(self):
        self.ciclo = True
        self.dados = {'IPS': 250, 'X obs': 0, 'XIS': 250, 'Y obs': 0, 'angulo': 0, 'dist': 0, 'obstaculo': 0}
        #self.resultado = firebase.post('/', self.dados)
        firebase.put('/','IPS',250)
        firebase.put('/','X obs',0)
        firebase.put('/','XIS',250)
        firebase.put('/','Y obs',0)
        firebase.put('/','angulo',0)
        firebase.put('/','dist',0)
        firebase.put('/','obstaculo',0)

    def pausar(self):
        self.ciclo = False



if __name__ == '__main__':
    vp_start_gui()





